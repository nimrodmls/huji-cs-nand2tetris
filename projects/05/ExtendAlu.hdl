// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).


// The ExtendAlu chip is an extension of the standard ALU which also supports
// shift operations.
// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1, the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x".
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     // Choosing the correct shift method, according to the the instruction input
     ShiftRight(in=x, out=xright);
     ShiftLeft(in=x, out=xleft);
     ShiftRight(in=y, out=yright);
     ShiftLeft(in=y, out=yleft);
     Mux4Way16(a=yright, b=xright, c=yleft, d=xleft, sel=instruction[4..5], out=shiftout);

     // Choosing the correct control bits, yet again according to the instruction
     Mux16(a=shiftout, b=x, sel=instruction[8], out=xalu);
     Mux16(a=false, b=y, sel=instruction[8], out=yalu);
     Mux(a=false, b=instruction[0], sel=instruction[8], out=nobit);
     Mux(a=false, b=instruction[1], sel=instruction[8], out=fbit);
     // Notice these following 2 muxes, they are intended let the ALU output the shifted
     // x/y WITHOUT any modification, if the shift instruction is placed
     // otherwise, the ALU will behave normally according to the given instruction
     Mux(a=true, b=instruction[2], sel=instruction[8], out=nybit);
     Mux(a=true, b=instruction[3], sel=instruction[8], out=zybit);
     Mux(a=false, b=instruction[4], sel=instruction[8], out=nxbit);
     Mux(a=false, b=instruction[5], sel=instruction[8], out=zxbit);

     ALU(x=xalu, y=yalu, zx=zxbit, nx=nxbit, zy=zybit, 
         ny=nybit, f=fbit, no=nobit, out=out, zr=zr, ng=ng);
}

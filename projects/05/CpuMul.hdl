// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    // The implementation of this CPU is IDENTICAL to the implementation of the regular CPU
    // of the base course, BUT, instead of using the regular ALU we use the Extended ALU (e.g. ExtendAlu)
    // and pass it the 9 instruction bits it requires from the instruction bus, as it complies with the requirements

    Mux16(a=instruction, b=aluout, sel=instruction[15], out=amuxout);
    // Overwriting A if and only if the destination bit is turned on
    Not(in=instruction[15], out=isAinstruction);
    Or(a=instruction[5], b=isAinstruction, out=shouldloadareg);
    ARegister(in=amuxout, load=shouldloadareg, out=areg);
    // Overwriting D if and only if the destination bit is turned on & it's a C instruction
    And(a=instruction[4], b=instruction[15], out=shouldloadD);
    DRegister(in=aluout, load=shouldloadD, out=dreg);
    Mux16(a=areg, b=inM, sel=instruction[12], out=compdata);
    ExtendAlu(x=dreg, y=compdata, instruction=instruction[6..14], out=aluout, zr=iszero, ng=isneg);
    // Outputting the ALU output to outM as well
    Or16(a=aluout, b=false, out=outM);
    // Outputting the current address stored in the A register
    Or16(a=areg, b=false, out[0..14]=addressM);
    // Validating whether we should write M or not, according to the destination bit
    And(a=instruction[3], b=instruction[15], out=writeM);
    // Determining whether the PC should load the current A register 
    // (hence the CPU had just executed a jump instruction. 
    // This is the so-called 'g' function from the lectures)
    Not(in=isneg, out=isnotneg);
    Not(in=iszero, out=isnotzero);
    And(a=isnotneg, b=isnotzero, out=ispositive);
    And(a=ispositive, b=instruction[0], out=shouldloadpc1);
    And(a=iszero, b=instruction[1], out=shouldloadpc2);
    And(a=isneg, b=instruction[2], out=shouldloadpc3);
    Or(a=shouldloadpc1, b=shouldloadpc2, out=shouldloadpc4);
    Or(a=shouldloadpc4, b=shouldloadpc3, out=shouldloadpc5);
    And(a=shouldloadpc5, b=instruction[15], out=shouldloadpc);
    Not(in=reset, out=notreset);
    PC(in=areg, load=shouldloadpc, inc=notreset, reset=reset, out[0..14]=pc);
}

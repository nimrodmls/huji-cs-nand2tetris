// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=amuxout);
    // Overwriting A if and only if the destination bit is turned on
    Not(in=instruction[15], out=isAinstruction);
    Or(a=instruction[5], b=isAinstruction, out=shouldloadareg);
    ARegister(in=amuxout, load=shouldloadareg, out=areg);
    // Overwriting D if and only if the destination bit is turned on & it's a C instruction
    And(a=instruction[4], b=instruction[15], out=shouldloadD);
    DRegister(in=aluout, load=shouldloadD, out=dreg);
    Mux16(a=areg, b=inM, sel=instruction[12], out=compdata);
    ALU(x=dreg, y=compdata, zx=instruction[11], nx=instruction[10], zy=instruction[9], 
        ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, zr=iszero, ng=isneg);
    // Outputting the ALU output to outM as well
    Or16(a=aluout, b=false, out=outM);
    // Outputting the current address stored in the A register
    Or16(a=areg, b=false, out[0..14]=addressM);
    // Validating whether we should write M or not, according to the destination bit
    And(a=instruction[3], b=instruction[15], out=writeM);
    // Determining whether the PC should load the current A register 
    // (hence the CPU had just executed a jump instruction. 
    // This is the so-called 'g' function from the lectures)
    Not(in=isneg, out=isnotneg);
    Not(in=iszero, out=isnotzero);
    And(a=isnotneg, b=isnotzero, out=ispositive);
    And(a=ispositive, b=instruction[0], out=shouldloadpc1);
    And(a=iszero, b=instruction[1], out=shouldloadpc2);
    And(a=isneg, b=instruction[2], out=shouldloadpc3);
    Or(a=shouldloadpc1, b=shouldloadpc2, out=shouldloadpc4);
    Or(a=shouldloadpc4, b=shouldloadpc3, out=shouldloadpc5);
    And(a=shouldloadpc5, b=instruction[15], out=shouldloadpc);
    Not(in=reset, out=notreset);
    PC(in=areg, load=shouldloadpc, inc=notreset, reset=reset, out[0..14]=pc);
}